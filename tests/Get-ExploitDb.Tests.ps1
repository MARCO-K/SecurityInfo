Describe 'Get-ExploitDb' {
    BeforeEach {
        # Mock data for successful Exploit-DB API lookups
        $script:mockExploitDbData = [PSCustomObject]@{
            data = @(
                [PSCustomObject]@{
                    id             = "51234"
                    description    = @("", "Remote Code Execution via Buffer Overflow")
                    platform_id    = "Linux"
                    date_published = "2023-01-15"
                    verified       = 1
                },
                [PSCustomObject]@{
                    id             = "51235"
                    description    = @("", "Local Privilege Escalation")
                    platform_id    = "Windows"
                    date_published = "2023-01-20"
                    verified       = 0
                }
            )
        }

        $script:mockSingleExploitData = [PSCustomObject]@{
            data = @(
                [PSCustomObject]@{
                    id             = "51236"
                    description    = @("", "SQL Injection Attack Vector")
                    platform_id    = "Multiple"
                    date_published = "2023-02-01"
                    verified       = 1
                }
            )
        }

        $script:mockEmptyData = [PSCustomObject]@{
            data = @()
        }

        # Mock for Invoke-RestMethod
        Mock -CommandName Invoke-RestMethod -MockWith {
            param($Uri, $Headers)

            if ($Uri -match "cve=CVE-2023-12345") {
                return $script:mockExploitDbData
            }
            elseif ($Uri -match "cve=CVE-2023-67890") {
                return $script:mockSingleExploitData
            }
            elseif ($Uri -match "cve=CVE-9999-9999") {
                return $script:mockEmptyData
            }
            elseif ($Uri -match "cve=CVE-5000-5000") {
                throw "Simulated API Error"
            }
            else {
                return $script:mockEmptyData
            }
        }

        . "$PSScriptRoot/../functions/Get-ExploitDb.ps1"
    }

    Context 'Basic Functionality' {
        It 'returns exploit data for CVE with multiple exploits' {
            $result = Get-ExploitDb -CveId "CVE-2023-12345"
            $result | Should -Not -BeNull
            ($result | Measure-Object).Count | Should -Be 2

            # Verify first exploit
            $result[0].CVEID | Should -Be "CVE-2023-12345"
            $result[0].ExploitID | Should -Be "51234"
            $result[0].ExploitLink | Should -Be "https://www.exploit-db.com/exploits/51234"
            $result[0].ExploitTitle | Should -Be "Remote Code Execution via Buffer Overflow"
            $result[0].Platform | Should -Be "Linux"
            $result[0].PublishedDate | Should -Be "2023-01-15"
            $result[0].Verified | Should -Be $true

            # Verify second exploit
            $result[1].CVEID | Should -Be "CVE-2023-12345"
            $result[1].ExploitID | Should -Be "51235"
            $result[1].ExploitLink | Should -Be "https://www.exploit-db.com/exploits/51235"
            $result[1].ExploitTitle | Should -Be "Local Privilege Escalation"
            $result[1].Platform | Should -Be "Windows"
            $result[1].PublishedDate | Should -Be "2023-01-20"
            $result[1].Verified | Should -Be $false
        }

        It 'returns exploit data for CVE with single exploit' {
            $result = Get-ExploitDb -CveId "CVE-2023-67890"
            $result | Should -Not -BeNull
            ($result | Measure-Object).Count | Should -Be 1
            $result.CVEID | Should -Be "CVE-2023-67890"
            $result.ExploitID | Should -Be "51236"
            $result.ExploitTitle | Should -Be "SQL Injection Attack Vector"
            $result.Platform | Should -Be "Multiple"
            $result.Verified | Should -Be $true
        }

        It 'handles CVE IDs without the CVE- prefix' {
            $result = Get-ExploitDb -CveId "2023-12345"
            $result | Should -Not -BeNull
            ($result | Measure-Object).Count | Should -Be 2
            $result[0].CVEID | Should -Be "CVE-2023-12345"
        }

        It 'returns nothing when no exploits are found' {
            $result = Get-ExploitDb -CveId "CVE-9999-9999"
            $result | Should -BeNull
        }
    }

    Context 'Pipeline Input' {
        It 'processes multiple CVE IDs from pipeline' {
            $cveIds = @("CVE-2023-12345", "CVE-2023-67890")
            $result = $cveIds | Get-ExploitDb
            $result | Should -Not -BeNull
            ($result | Measure-Object).Count | Should -Be 3  # 2 from first CVE + 1 from second CVE

            # Verify CVE distribution
            ($result | Where-Object { $_.CVEID -eq "CVE-2023-12345" } | Measure-Object).Count | Should -Be 2
            ($result | Where-Object { $_.CVEID -eq "CVE-2023-67890" } | Measure-Object).Count | Should -Be 1
        }

        It 'processes array input directly' {
            $result = Get-ExploitDb -CveId @("CVE-2023-12345", "CVE-2023-67890")
            $result | Should -Not -BeNull
            ($result | Measure-Object).Count | Should -Be 3  # 2 from first CVE + 1 from second CVE
        }

        It 'handles mixed CVE formats in pipeline' {
            $cveIds = @("2023-12345", "CVE-2023-67890")
            $result = $cveIds | Get-ExploitDb
            $result | Should -Not -BeNull
            ($result | Measure-Object).Count | Should -Be 3

            # All should be normalized to CVE- format
            $result | ForEach-Object { $_.CVEID | Should -Match "^CVE-" }
        }
    }

    Context 'Error Handling' {
        It 'writes an error on API failure' {
            $errors = @()
            $result = Get-ExploitDb -CveId "CVE-5000-5000" -ErrorVariable errors
            $result | Should -BeNull
            $errors.Count | Should -BeGreaterThan 0
            # Verify that an error was generated
            $errors[0] | Should -Not -BeNull
            # The original exception is RuntimeException from the throw, wrapped by Write-Error
            $errors[0].Exception | Should -BeOfType [System.Management.Automation.RuntimeException]
        }

        It 'continues processing other CVEs when one fails' {
            $errors = @()
            $result = Get-ExploitDb -CveId @("CVE-5000-5000", "CVE-2023-67890") -ErrorVariable errors

            # Should get results from the successful CVE
            $result | Should -Not -BeNull
            ($result | Measure-Object).Count | Should -Be 1
            $result.CVEID | Should -Be "CVE-2023-67890"

            # Should have captured the error from the failed CVE
            $errors.Count | Should -BeGreaterThan 0
        }
    }

    Context 'Data Type Validation' {
        It 'converts verified field to proper boolean type' {
            $result = Get-ExploitDb -CveId "CVE-2023-12345"
            $result | Should -Not -BeNull
            $result[0].Verified | Should -BeOfType [bool]
            $result[1].Verified | Should -BeOfType [bool]
            $result[0].Verified | Should -Be $true
            $result[1].Verified | Should -Be $false
        }

        It 'returns proper data types for all fields' {
            $result = Get-ExploitDb -CveId "CVE-2023-67890"
            $result | Should -Not -BeNull
            $result.CVEID | Should -BeOfType [string]
            $result.ExploitID | Should -BeOfType [string]
            $result.ExploitLink | Should -BeOfType [string]
            $result.ExploitTitle | Should -BeOfType [string]
            $result.Platform | Should -BeOfType [string]
            $result.PublishedDate | Should -BeOfType [string]
            $result.Verified | Should -BeOfType [bool]
        }
    }

    Context 'HTTP Headers and Request Validation' {
        It 'calls Invoke-RestMethod with correct headers' {
            Get-ExploitDb -CveId "CVE-2023-12345"

            # Verify that Invoke-RestMethod was called with headers
            Assert-MockCalled -CommandName Invoke-RestMethod -Times 1 -ParameterFilter {
                $Headers -and
                $Headers["User-Agent"] -match "Mozilla" -and
                $Headers["X-Requested-With"] -eq "XMLHttpRequest" -and
                $Headers["Referer"] -match "exploit-db.com" -and
                $Headers["Accept"] -match "application/json"
            }
        }

        It 'constructs correct URL for CVE query' {
            Get-ExploitDb -CveId "CVE-2023-12345"

            # Verify that the URL contains the CVE parameter
            Assert-MockCalled -CommandName Invoke-RestMethod -Times 1 -ParameterFilter {
                $Uri -match "cve=CVE-2023-12345"
            }
        }
    }

    Context 'Edge Cases' {
        It 'handles exploit data without ID gracefully' {
            # Mock data with missing ID
            Mock -CommandName Invoke-RestMethod -MockWith {
                return [PSCustomObject]@{
                    data = @(
                        [PSCustomObject]@{
                            # Missing 'id' property
                            description    = @("", "Test Exploit")
                            platform_id    = "Linux"
                            date_published = "2023-01-01"
                            verified       = 1
                        }
                    )
                }
            }

            $result = Get-ExploitDb -CveId "CVE-2023-99999"
            $result | Should -BeNull  # Should not return exploits without ID
        }

        It 'handles empty description array gracefully' {
            # Mock data with empty description
            Mock -CommandName Invoke-RestMethod -MockWith {
                return [PSCustomObject]@{
                    data = @(
                        [PSCustomObject]@{
                            id             = "51999"
                            description    = @()
                            platform_id    = "Linux"
                            date_published = "2023-01-01"
                            verified       = 1
                        }
                    )
                }
            }

            $result = Get-ExploitDb -CveId "CVE-2023-99999"
            $result | Should -Not -BeNull
            $result.ExploitTitle | Should -BeNull  # Should handle missing title gracefully
        }

        It 'handles null API response gracefully' {
            Mock -CommandName Invoke-RestMethod -MockWith {
                return $null
            }

            $result = Get-ExploitDb -CveId "CVE-2023-99999"
            $result | Should -BeNull
        }
    }

    Context 'Verbose Output' {
        It 'writes verbose messages when no exploits found' {
            $VerboseMessages = @()
            Get-ExploitDb -CveId "CVE-9999-9999" -Verbose 4>&1 | ForEach-Object {
                if ($_ -is [System.Management.Automation.VerboseRecord]) {
                    $VerboseMessages += $_.Message
                }
            }

            $VerboseMessages | Should -Contain "No exploits found on Exploit-DB for CVE CVE-9999-9999."
        }
    }
}
